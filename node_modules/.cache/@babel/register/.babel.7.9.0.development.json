{
  "{\"sourceRoot\":\"/Users/alenanikulina/labs/linkedin/my-blog-backend/src/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/alenanikulina/labs/linkedin/my-blog-backend\",\"filename\":\"/Users/alenanikulina/labs/linkedin/my-blog-backend/src/server.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/alenanikulina/labs/linkedin/my-blog-backend\",\"plugins\":[{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.9.0": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/alenanikulina/labs/linkedin/my-blog-backend/src/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/alenanikulina/labs/linkedin/my-blog-backend",
      "filename": "/Users/alenanikulina/labs/linkedin/my-blog-backend/src/server.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/alenanikulina/labs/linkedin/my-blog-backend",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/alenanikulina/labs/linkedin/my-blog-backend/src/server.js",
        "plugins": [
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/alenanikulina/labs/linkedin/my-blog-backend/src/server.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/alenanikulina/labs/linkedin/my-blog-backend/src/",
        "sourceFileName": "server.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _express = _interopRequireDefault(require(\"express\"));\n\nvar _bodyParser = _interopRequireDefault(require(\"body-parser\"));\n\nvar _mongodb = require(\"mongodb\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n// allows us to connect to the local database\nvar app = (0, _express[\"default\"])(); // once we have the app created that way we can define the end-points and what do we want to do once we hit one of those end points\n\napp.use(_bodyParser[\"default\"].json()); // this will parse the JSON object that we included in the body of our POST request and it adds a body property to the request parameter of whatever the matching route is\n// app.get('/hello', (req, res) => res.send('Hello!'));\n// app.get('/hello/:name', (req, res) => res.send(`Hello ${req.params.name}`))\n// app.post('/hello', (req, res) => res.send(`Hello ${req.body.name}!`));\n// function responsible for the setup and teardown of our databse communications\n\nvar withDB = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(operations, res) {\n    var client, db;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _mongodb.MongoClient.connect(\"mongodb://localhost:27017\", {\n              useNewUrlParser: true\n            });\n\n          case 3:\n            client = _context.sent;\n            // this connect function is asynchornous (returns a promise) -will return a client object that we can use to send queries to database\n            db = client.db(\"my-blog\"); // choose the database we're using\n\n            _context.next = 7;\n            return operations(db);\n\n          case 7:\n            client.close(); // closes our connection to the database\n\n            _context.next = 13;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            res.status(500).json({\n              message: \"Error connecting to db\",\n              error: _context.t0\n            });\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 10]]);\n  }));\n\n  return function withDB(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}(); // retrieving articles endpoints\n\n\napp.get('/api/articles/:name', /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(req, res) {\n    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            withDB( /*#__PURE__*/function () {\n              var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(db) {\n                var articleName, articleInfo;\n                return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        articleName = req.params.name;\n                        _context2.next = 3;\n                        return db.collection('articles').findOne({\n                          name: articleName\n                        });\n\n                      case 3:\n                        articleInfo = _context2.sent;\n                        res.status(200).json(articleInfo);\n\n                      case 5:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _callee2);\n              }));\n\n              return function (_x5) {\n                return _ref3.apply(this, arguments);\n              };\n            }(), res);\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function (_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}()); // sending upvotes endpoints\n\napp.post('/api/articles/:name/upvote', /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(req, res) {\n    return regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            withDB( /*#__PURE__*/function () {\n              var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(db) {\n                var articleName, articleInfo, updatedArticleInfo;\n                return regeneratorRuntime.wrap(function _callee4$(_context4) {\n                  while (1) {\n                    switch (_context4.prev = _context4.next) {\n                      case 0:\n                        articleName = req.params.name;\n                        _context4.next = 3;\n                        return db.collection(\"articles\").findOne({\n                          name: articleName\n                        });\n\n                      case 3:\n                        articleInfo = _context4.sent;\n                        _context4.next = 6;\n                        return db.collection(\"articles\").updateOne({\n                          name: articleName\n                        }, {\n                          $set: {\n                            upvotes: articleInfo.upvotes + 1\n                          }\n                        });\n\n                      case 6:\n                        _context4.next = 8;\n                        return db.collection(\"articles\").findOne({\n                          name: articleName\n                        });\n\n                      case 8:\n                        updatedArticleInfo = _context4.sent;\n                        res.status(200).json(updatedArticleInfo);\n\n                      case 10:\n                      case \"end\":\n                        return _context4.stop();\n                    }\n                  }\n                }, _callee4);\n              }));\n\n              return function (_x8) {\n                return _ref5.apply(this, arguments);\n              };\n            }(), res);\n\n          case 1:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function (_x6, _x7) {\n    return _ref4.apply(this, arguments);\n  };\n}()); // sending comments endpoints\n\napp.post('/api/articles/:name/add-comment', function (req, res) {\n  var _req$body = req.body,\n      username = _req$body.username,\n      text = _req$body.text;\n  var articleName = req.params.name;\n  withDB( /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(db) {\n      var articleInfo, updatedArticleInfo;\n      return regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return db.collection('articles').findOne({\n                name: articleName\n              });\n\n            case 2:\n              articleInfo = _context6.sent;\n              _context6.next = 5;\n              return db.collection('articles').updateOne({\n                name: articleName\n              }, {\n                '$set': {\n                  comments: articleInfo.comments.concat({\n                    username: username,\n                    text: text\n                  })\n                }\n              });\n\n            case 5:\n              _context6.next = 7;\n              return db.collection('articles').findOne({\n                name: articleName\n              });\n\n            case 7:\n              updatedArticleInfo = _context6.sent;\n              res.status(200).json(updatedArticleInfo);\n\n            case 9:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function (_x9) {\n      return _ref6.apply(this, arguments);\n    };\n  }(), res);\n});\napp.listen(8000, function () {\n  return console.log('Listening on port 8000');\n}); // ▶ npx babel-node src/server.js -> run this command in the console to start the node server  -> should get :\n// Listening on port 8000\n// ▶ npx nodemon --exec npx babel-node src/server.js -> run this in the console for the server to restart automatically (so we don't have to do it manually)\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci5qcyJdLCJuYW1lcyI6WyJhcHAiLCJ1c2UiLCJib2R5UGFyc2VyIiwianNvbiIsIndpdGhEQiIsIm9wZXJhdGlvbnMiLCJyZXMiLCJNb25nb0NsaWVudCIsImNvbm5lY3QiLCJ1c2VOZXdVcmxQYXJzZXIiLCJjbGllbnQiLCJkYiIsImNsb3NlIiwic3RhdHVzIiwibWVzc2FnZSIsImVycm9yIiwiZ2V0IiwicmVxIiwiYXJ0aWNsZU5hbWUiLCJwYXJhbXMiLCJuYW1lIiwiY29sbGVjdGlvbiIsImZpbmRPbmUiLCJhcnRpY2xlSW5mbyIsInBvc3QiLCJ1cGRhdGVPbmUiLCIkc2V0IiwidXB2b3RlcyIsInVwZGF0ZWRBcnRpY2xlSW5mbyIsImJvZHkiLCJ1c2VybmFtZSIsInRleHQiLCJjb21tZW50cyIsImNvbmNhdCIsImxpc3RlbiIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBQ0E7Ozs7Ozs7O0FBQXVDO0FBR3ZDLElBQU1BLEdBQUcsR0FBRywwQkFBWixDLENBQ0E7O0FBRUFBLEdBQUcsQ0FBQ0MsR0FBSixDQUFRQyx1QkFBV0MsSUFBWCxFQUFSLEUsQ0FDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBOztBQUNBLElBQU1DLE1BQU07QUFBQSxxRUFBRyxpQkFBT0MsVUFBUCxFQUFtQkMsR0FBbkI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLG1CQUVZQyxxQkFBWUMsT0FBWixDQUFvQiwyQkFBcEIsRUFBaUQ7QUFDcEVDLGNBQUFBLGVBQWUsRUFBRTtBQURtRCxhQUFqRCxDQUZaOztBQUFBO0FBRUhDLFlBQUFBLE1BRkc7QUFJTDtBQUNFQyxZQUFBQSxFQUxHLEdBS0VELE1BQU0sQ0FBQ0MsRUFBUCxDQUFVLFNBQVYsQ0FMRixFQUt3Qjs7QUFMeEI7QUFBQSxtQkFPSE4sVUFBVSxDQUFDTSxFQUFELENBUFA7O0FBQUE7QUFTVEQsWUFBQUEsTUFBTSxDQUFDRSxLQUFQLEdBVFMsQ0FTTzs7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QVIsQ0FBWSx3QkFBWixDQUFOO0FBQUEsQ0FBakIsRSxDQUtBO0FBQ0E7QUFFQSIsInNvdXJjZVJvb3QiOiIvVXNlcnMvYWxlbmFuaWt1bGluYS9sYWJzL2xpbmtlZGluL215LWJsb2ctYmFja2VuZC9zcmMvIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgYm9keVBhcnNlciBmcm9tICdib2R5LXBhcnNlcic7XG5pbXBvcnQgeyBNb25nb0NsaWVudCB9IGZyb20gJ21vbmdvZGInOyAvLyBhbGxvd3MgdXMgdG8gY29ubmVjdCB0byB0aGUgbG9jYWwgZGF0YWJhc2VcblxuXG5jb25zdCBhcHAgPSBleHByZXNzKCk7IFxuLy8gb25jZSB3ZSBoYXZlIHRoZSBhcHAgY3JlYXRlZCB0aGF0IHdheSB3ZSBjYW4gZGVmaW5lIHRoZSBlbmQtcG9pbnRzIGFuZCB3aGF0IGRvIHdlIHdhbnQgdG8gZG8gb25jZSB3ZSBoaXQgb25lIG9mIHRob3NlIGVuZCBwb2ludHNcblxuYXBwLnVzZShib2R5UGFyc2VyLmpzb24oKSk7XG4vLyB0aGlzIHdpbGwgcGFyc2UgdGhlIEpTT04gb2JqZWN0IHRoYXQgd2UgaW5jbHVkZWQgaW4gdGhlIGJvZHkgb2Ygb3VyIFBPU1QgcmVxdWVzdCBhbmQgaXQgYWRkcyBhIGJvZHkgcHJvcGVydHkgdG8gdGhlIHJlcXVlc3QgcGFyYW1ldGVyIG9mIHdoYXRldmVyIHRoZSBtYXRjaGluZyByb3V0ZSBpc1xuXG4vLyBhcHAuZ2V0KCcvaGVsbG8nLCAocmVxLCByZXMpID0+IHJlcy5zZW5kKCdIZWxsbyEnKSk7XG4vLyBhcHAuZ2V0KCcvaGVsbG8vOm5hbWUnLCAocmVxLCByZXMpID0+IHJlcy5zZW5kKGBIZWxsbyAke3JlcS5wYXJhbXMubmFtZX1gKSlcbi8vIGFwcC5wb3N0KCcvaGVsbG8nLCAocmVxLCByZXMpID0+IHJlcy5zZW5kKGBIZWxsbyAke3JlcS5ib2R5Lm5hbWV9IWApKTtcblxuLy8gZnVuY3Rpb24gcmVzcG9uc2libGUgZm9yIHRoZSBzZXR1cCBhbmQgdGVhcmRvd24gb2Ygb3VyIGRhdGFic2UgY29tbXVuaWNhdGlvbnNcbmNvbnN0IHdpdGhEQiA9IGFzeW5jIChvcGVyYXRpb25zLCByZXMpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgY2xpZW50ID0gYXdhaXQgTW9uZ29DbGllbnQuY29ubmVjdChcIm1vbmdvZGI6Ly9sb2NhbGhvc3Q6MjcwMTdcIiwge1xuICAgICAgICB1c2VOZXdVcmxQYXJzZXI6IHRydWUsXG4gICAgICB9KTsgLy8gdGhpcyBjb25uZWN0IGZ1bmN0aW9uIGlzIGFzeW5jaG9ybm91cyAocmV0dXJucyBhIHByb21pc2UpIC13aWxsIHJldHVybiBhIGNsaWVudCBvYmplY3QgdGhhdCB3ZSBjYW4gdXNlIHRvIHNlbmQgcXVlcmllcyB0byBkYXRhYmFzZVxuICAgICAgY29uc3QgZGIgPSBjbGllbnQuZGIoXCJteS1ibG9nXCIpOyAvLyBjaG9vc2UgdGhlIGRhdGFiYXNlIHdlJ3JlIHVzaW5nXG5cbiAgICAgIGF3YWl0IG9wZXJhdGlvbnMoZGIpO1xuXG4gICAgICBjbGllbnQuY2xvc2UoKTsgLy8gY2xvc2VzIG91ciBjb25uZWN0aW9uIHRvIHRoZSBkYXRhYmFzZVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7IG1lc3NhZ2U6IFwiRXJyb3IgY29ubmVjdGluZyB0byBkYlwiLCBlcnJvciB9KTtcbiAgICB9XG59XG5cblxuLy8gcmV0cmlldmluZyBhcnRpY2xlcyBlbmRwb2ludHNcbmFwcC5nZXQoJy9hcGkvYXJ0aWNsZXMvOm5hbWUnLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgICB3aXRoREIoYXN5bmMgKGRiKSA9PiB7XG4gICAgICAgIGNvbnN0IGFydGljbGVOYW1lID0gcmVxLnBhcmFtcy5uYW1lO1xuICAgIFxuICAgICAgICBjb25zdCBhcnRpY2xlSW5mbyA9IGF3YWl0IGRiLmNvbGxlY3Rpb24oJ2FydGljbGVzJykuZmluZE9uZSh7IG5hbWU6IGFydGljbGVOYW1lfSk7XG4gICAgICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKGFydGljbGVJbmZvKTtcbiAgICB9LCByZXMpXG59KVxuXG4vLyBzZW5kaW5nIHVwdm90ZXMgZW5kcG9pbnRzXG5hcHAucG9zdCgnL2FwaS9hcnRpY2xlcy86bmFtZS91cHZvdGUnLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgICB3aXRoREIoYXN5bmMgKGRiKSA9PiB7XG4gICAgICAgIGNvbnN0IGFydGljbGVOYW1lID0gcmVxLnBhcmFtcy5uYW1lO1xuICBcbiAgICAgICAgY29uc3QgYXJ0aWNsZUluZm8gPSBhd2FpdCBkYlxuICAgICAgICAgIC5jb2xsZWN0aW9uKFwiYXJ0aWNsZXNcIilcbiAgICAgICAgICAuZmluZE9uZSh7IG5hbWU6IGFydGljbGVOYW1lIH0pO1xuICAgICAgICBhd2FpdCBkYi5jb2xsZWN0aW9uKFwiYXJ0aWNsZXNcIikudXBkYXRlT25lKFxuICAgICAgICAgIHsgbmFtZTogYXJ0aWNsZU5hbWUgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICAkc2V0OiB7XG4gICAgICAgICAgICAgIHVwdm90ZXM6IGFydGljbGVJbmZvLnVwdm90ZXMgKyAxLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IHVwZGF0ZWRBcnRpY2xlSW5mbyA9IGF3YWl0IGRiXG4gICAgICAgICAgLmNvbGxlY3Rpb24oXCJhcnRpY2xlc1wiKVxuICAgICAgICAgIC5maW5kT25lKHsgbmFtZTogYXJ0aWNsZU5hbWUgfSk7XG4gIFxuICAgICAgICByZXMuc3RhdHVzKDIwMCkuanNvbih1cGRhdGVkQXJ0aWNsZUluZm8pO1xuICAgIH0sIHJlcylcbn0pOyAgICBcblxuXG4vLyBzZW5kaW5nIGNvbW1lbnRzIGVuZHBvaW50c1xuYXBwLnBvc3QoJy9hcGkvYXJ0aWNsZXMvOm5hbWUvYWRkLWNvbW1lbnQnLCAocmVxLCByZXMpID0+IHtcbiAgICBjb25zdCB7IHVzZXJuYW1lLCB0ZXh0IH0gPSByZXEuYm9keTtcbiAgICBjb25zdCBhcnRpY2xlTmFtZSA9IHJlcS5wYXJhbXMubmFtZTtcblxuICAgIHdpdGhEQihhc3luYyAoZGIpID0+IHtcbiAgICAgICAgY29uc3QgYXJ0aWNsZUluZm8gPSBhd2FpdCBkYi5jb2xsZWN0aW9uKCdhcnRpY2xlcycpLmZpbmRPbmUoeyBuYW1lOiBhcnRpY2xlTmFtZSB9KVxuICAgICAgICBhd2FpdCBkYi5jb2xsZWN0aW9uKCdhcnRpY2xlcycpLnVwZGF0ZU9uZSh7IG5hbWU6IGFydGljbGVOYW1lIH0sIHtcbiAgICAgICAgICAgICckc2V0Jzoge1xuICAgICAgICAgICAgICAgIGNvbW1lbnRzOiBhcnRpY2xlSW5mby5jb21tZW50cy5jb25jYXQoeyB1c2VybmFtZSwgdGV4dCB9KSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCB1cGRhdGVkQXJ0aWNsZUluZm8gPSBhd2FpdCBkYi5jb2xsZWN0aW9uKCdhcnRpY2xlcycpLmZpbmRPbmUoeyBuYW1lOiBhcnRpY2xlTmFtZX0pO1xuXG4gICAgICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHVwZGF0ZWRBcnRpY2xlSW5mbyk7XG4gICAgfSwgcmVzKTtcbn0pO1xuXG5hcHAubGlzdGVuKDgwMDAsICgpID0+IGNvbnNvbGUubG9nKCdMaXN0ZW5pbmcgb24gcG9ydCA4MDAwJykpO1xuXG5cblxuXG4vLyDilrYgbnB4IGJhYmVsLW5vZGUgc3JjL3NlcnZlci5qcyAtPiBydW4gdGhpcyBjb21tYW5kIGluIHRoZSBjb25zb2xlIHRvIHN0YXJ0IHRoZSBub2RlIHNlcnZlciAgLT4gc2hvdWxkIGdldCA6XG4vLyBMaXN0ZW5pbmcgb24gcG9ydCA4MDAwXG5cbi8vIOKWtiBucHggbm9kZW1vbiAtLWV4ZWMgbnB4IGJhYmVsLW5vZGUgc3JjL3NlcnZlci5qcyAtPiBydW4gdGhpcyBpbiB0aGUgY29uc29sZSBmb3IgdGhlIHNlcnZlciB0byByZXN0YXJ0IGF1dG9tYXRpY2FsbHkgKHNvIHdlIGRvbid0IGhhdmUgdG8gZG8gaXQgbWFudWFsbHkpIl19",
    "map": {
      "version": 3,
      "sources": [
        "server.js"
      ],
      "names": [
        "app",
        "use",
        "bodyParser",
        "json",
        "withDB",
        "operations",
        "res",
        "MongoClient",
        "connect",
        "useNewUrlParser",
        "client",
        "db",
        "close",
        "status",
        "message",
        "error",
        "get",
        "req",
        "articleName",
        "params",
        "name",
        "collection",
        "findOne",
        "articleInfo",
        "post",
        "updateOne",
        "$set",
        "upvotes",
        "updatedArticleInfo",
        "body",
        "username",
        "text",
        "comments",
        "concat",
        "listen",
        "console",
        "log"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/alenanikulina/labs/linkedin/my-blog-backend/src/",
      "sourcesContent": [
        "import express from 'express';\nimport bodyParser from 'body-parser';\nimport { MongoClient } from 'mongodb'; // allows us to connect to the local database\n\n\nconst app = express(); \n// once we have the app created that way we can define the end-points and what do we want to do once we hit one of those end points\n\napp.use(bodyParser.json());\n// this will parse the JSON object that we included in the body of our POST request and it adds a body property to the request parameter of whatever the matching route is\n\n// app.get('/hello', (req, res) => res.send('Hello!'));\n// app.get('/hello/:name', (req, res) => res.send(`Hello ${req.params.name}`))\n// app.post('/hello', (req, res) => res.send(`Hello ${req.body.name}!`));\n\n// function responsible for the setup and teardown of our databse communications\nconst withDB = async (operations, res) => {\n    try {\n      const client = await MongoClient.connect(\"mongodb://localhost:27017\", {\n        useNewUrlParser: true,\n      }); // this connect function is asynchornous (returns a promise) -will return a client object that we can use to send queries to database\n      const db = client.db(\"my-blog\"); // choose the database we're using\n\n      await operations(db);\n\n      client.close(); // closes our connection to the database\n    } catch (error) {\n      res.status(500).json({ message: \"Error connecting to db\", error });\n    }\n}\n\n\n// retrieving articles endpoints\napp.get('/api/articles/:name', async (req, res) => {\n    withDB(async (db) => {\n        const articleName = req.params.name;\n    \n        const articleInfo = await db.collection('articles').findOne({ name: articleName});\n        res.status(200).json(articleInfo);\n    }, res)\n})\n\n// sending upvotes endpoints\napp.post('/api/articles/:name/upvote', async (req, res) => {\n    withDB(async (db) => {\n        const articleName = req.params.name;\n  \n        const articleInfo = await db\n          .collection(\"articles\")\n          .findOne({ name: articleName });\n        await db.collection(\"articles\").updateOne(\n          { name: articleName },\n          {\n            $set: {\n              upvotes: articleInfo.upvotes + 1,\n            },\n          }\n        );\n        const updatedArticleInfo = await db\n          .collection(\"articles\")\n          .findOne({ name: articleName });\n  \n        res.status(200).json(updatedArticleInfo);\n    }, res)\n});    \n\n\n// sending comments endpoints\napp.post('/api/articles/:name/add-comment', (req, res) => {\n    const { username, text } = req.body;\n    const articleName = req.params.name;\n\n    withDB(async (db) => {\n        const articleInfo = await db.collection('articles').findOne({ name: articleName })\n        await db.collection('articles').updateOne({ name: articleName }, {\n            '$set': {\n                comments: articleInfo.comments.concat({ username, text }),\n            },\n        });\n        const updatedArticleInfo = await db.collection('articles').findOne({ name: articleName});\n\n        res.status(200).json(updatedArticleInfo);\n    }, res);\n});\n\napp.listen(8000, () => console.log('Listening on port 8000'));\n\n\n\n\n// ▶ npx babel-node src/server.js -> run this command in the console to start the node server  -> should get :\n// Listening on port 8000\n\n// ▶ npx nodemon --exec npx babel-node src/server.js -> run this in the console for the server to restart automatically (so we don't have to do it manually)"
      ]
    },
    "sourceType": "script",
    "mtime": 1586980815049
  }
}